buildscript {
    repositories {
        //maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        jcenter()
    }
    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4"
        classpath "com.novoda:bintray-release:0.5.0"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.15"
    }
}

plugins {
    id "com.dorongold.task-tree" version "1.2.2"
    id "org.jetbrains.kotlin.jvm" version "1.1.3"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.1.3"
    id "me.champeau.gradle.jmh" version "0.4.4"
    id "com.diffplug.gradle.spotless" version "3.4.0"
    id "nebula.javadoc-jar" version "5.1.0"
    id "nebula.source-jar" version "5.1.0"
}

apply plugin: "java"
apply plugin: "org.junit.platform.gradle.plugin"
apply plugin: "com.novoda.bintray-release"
apply plugin: "org.jetbrains.dokka"

group "com.uchuhimo"
version "0.1"

ext {
    junitJupiterVersion = "5.0.0-M4"
    kotlinVersion = "1.1.3"
    spekVersion = "1.1.2"
    jacksonVersion = "2.8.9"

    if (project.rootProject.file("private.properties").exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file("private.properties").newDataInputStream())
        bintrayUserProperty = properties.getProperty("bintrayUser")
        bintrayKeyProperty = properties.getProperty("bintrayKey")
    } else {
        bintrayUserProperty = ""
        bintrayKeyProperty = ""
    }
}

repositories {
    //maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
    jcenter()
    maven { url 'https://jitpack.io' }
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.0"
    distributionType = Wrapper.DistributionType.ALL
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile "com.github.uchuhimo:kotlinx-bimap:v0.2"
    compile "com.typesafe:config:1.3.1"
    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    compile "org.yaml:snakeyaml:1.18"
    compile "com.moandjiezana.toml:toml4j:0.7.1"
    compile "org.dom4j:dom4j:2.0.1"

    testCompile "com.natpryce:hamkrest:1.4.0.0"
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testRuntime "org.junit.platform:junit-platform-launcher:1.0.0-M4"
    testCompile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    ["spek-api", "spek-data-driven-extension", "spek-subject-extension"].each {
        testCompile("org.jetbrains.spek:$it:$spekVersion") {
            exclude group: "org.jetbrains.kotlin"
        }
    }
    testCompile("org.jetbrains.spek:spek-junit-platform-engine:$spekVersion") {
        exclude group: "org.junit.platform"
        exclude group: "org.jetbrains.kotlin"
    }
    testCompile "com.sparkjava:spark-core:2.6.0"
    testCompile "org.slf4j:slf4j-simple:1.7.25"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

junitPlatform {
    filters {
        engines {
            include "spek", "junit-jupiter"
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

afterEvaluate {
    junitPlatformTest {
        environment "source.test.type", "env"
        jvmArgs "-Djava.net.preferIPv4Stack=true"
    }
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
}

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

tasks.withType(KotlinCompile) {
    kotlinOptions {
        jvmTarget = "1.8"
        apiVersion = "1.1"
        languageVersion = "1.1"
    }
}

allOpen {
    annotation("org.openjdk.jmh.annotations.BenchmarkMode")
    annotation("org.openjdk.jmh.annotations.State")
}

jmh {
    iterations = 10 // Number of measurement iterations to do.
    //benchmarkMode = ["thrpt"] // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
    batchSize = 1 // Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)
    fork = 1 // How many times to forks a single benchmark. Use 0 to disable forking altogether
    //operationsPerInvocation = 1 // Operations per invocation.
    timeOnIteration = "1s" // Time to spend at each measurement iteration.
    threads = 4 // Number of worker threads to run with.
    timeout = "10s" // Timeout for benchmark iteration.
    //timeUnit = "ns" // Output time unit. Available time units are: [m, s, ms, us, ns].
    warmup = "1s" // Time to spend at each warmup iteration.
    warmupBatchSize = 1 // Warmup batch size: number of benchmark method calls per operation.
    //warmupForks = 0 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
    warmupIterations = 10 // Number of warmup iterations to do.
    zip64 = false // Use ZIP64 format for bigger archives
    jmhVersion = "1.19" // Specifies JMH version
}

spotless {
    java {
        googleJavaFormat("1.3")
        trimTrailingWhitespace()
        endWithNewline()
    }
    kotlin {
        ktlint("0.8.3")
        trimTrailingWhitespace()
        endWithNewline()
    }
}

dokka {
    outputFormat = "html"
    outputDirectory = javadoc.destinationDir
}

javadoc.dependsOn dokka

publish {
    userOrg = "uchuhimo"
    groupId = project.group
    artifactId = rootProject.name
    publishVersion = project.version
    licences = ["Apache-2.0"]
    desc = "A type safe configuration library for Kotlin," +
            " support to load from JSON, XML, YAML, HOCON, TOML, properties," +
            " map, command line and environment variables"
    website = "https://github.com/uchuhimo/konf"
    bintrayUser = bintrayUserProperty
    bintrayKey = bintrayKeyProperty
    dryRun = false
}
