buildscript {
    ext {
        aliyunMavenUrl = "http://maven.aliyun.com/nexus/content/groups/public"
        junitPlatformVersion = "1.0.0-M4"

        if (project.rootProject.file("private.properties").exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("private.properties").newDataInputStream())
            bintrayUserProperty = properties.getProperty("bintrayUser")
            bintrayKeyProperty = properties.getProperty("bintrayKey")
        } else {
            bintrayUserProperty = ""
            bintrayKeyProperty = ""
        }
    }
    repositories {
        //maven { url aliyunMavenUrl }
        jcenter()
    }
    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion"
        classpath "com.novoda:bintray-release:0.5.0"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.15"
    }
}

plugins {
    id "com.gradle.build-scan" version "1.8"
    id "com.dorongold.task-tree" version "1.2.2"
    id "org.jetbrains.kotlin.jvm" version "1.1.3-2"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.1.3-2"
    id "me.champeau.gradle.jmh" version "0.4.4"
    id "com.diffplug.gradle.spotless" version "3.4.0"
    id "io.spring.dependency-management" version "1.0.3.RELEASE"
}

apply plugin: "java"
apply plugin: "jacoco"
apply plugin: "org.junit.platform.gradle.plugin"
apply plugin: "com.novoda.bintray-release"
apply plugin: "org.jetbrains.dokka"

group "com.uchuhimo"
version "0.3"

repositories {
    //maven { url aliyunMavenUrl }
    jcenter()
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.0"
    distributionType = Wrapper.DistributionType.ALL
}

dependencyManagement {
    dependencies {
        dependency "com.uchuhimo:kotlinx-bimap:1.0"
        dependency "com.typesafe:config:1.3.1"
        dependency "org.yaml:snakeyaml:1.18"
        dependency "com.moandjiezana.toml:toml4j:0.7.1"
        dependency "org.dom4j:dom4j:2.0.1"

        dependencySet(group: "org.jetbrains.kotlin", version: "1.1.3-2") {
            entry "kotlin-stdlib"
            entry "kotlin-reflect"
            entry "kotlin-stdlib-jre8"
        }

        def jacksonVersion = "2.9.0"
        dependencySet(group: "com.fasterxml.jackson.core", version: jacksonVersion) {
            entry "jackson-core"
            entry "jackson-annotations"
            entry "jackson-databind"
        }
        dependency "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
        dependency "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    }

    testImplementation {
        dependencies {
            dependency "org.jetbrains.kotlin:kotlin-test:1.1.3-2"
            dependency "com.natpryce:hamkrest:1.4.1.0"
            dependency "org.hamcrest:hamcrest-all:1.3"
            dependency "com.sparkjava:spark-core:2.6.0"
            dependency "org.slf4j:slf4j-simple:1.7.25"

            dependency "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
            dependencySet(group: "org.junit.jupiter", version: "5.0.0-M4") {
                entry "junit-jupiter-api"
                entry "junit-jupiter-engine"
            }

            dependencySet(group: "org.jetbrains.spek", version: "1.1.2") {
                entry "spek-api"
                entry "spek-data-driven-extension"
                entry "spek-subject-extension"
                entry "spek-junit-platform-engine"
            }
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "com.uchuhimo:kotlinx-bimap"
    implementation "com.typesafe:config"
    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "org.yaml:snakeyaml"
    implementation "com.moandjiezana.toml:toml4j"
    implementation "org.dom4j:dom4j"

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "com.natpryce:hamkrest"
    testImplementation "org.hamcrest:hamcrest-all"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.jetbrains.spek:spek-api"
    testImplementation "org.jetbrains.spek:spek-data-driven-extension"
    testImplementation "org.jetbrains.spek:spek-subject-extension"
    testImplementation "com.sparkjava:spark-core"

    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testRuntimeOnly "org.jetbrains.spek:spek-junit-platform-engine"
    testRuntimeOnly "org.slf4j:slf4j-simple"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

junitPlatform {
    filters {
        engines {
            include "spek", "junit-jupiter"
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

afterEvaluate {
    junitPlatformTest {
        environment "source.test.type", "env"
    }
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
}

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

tasks.withType(KotlinCompile) {
    kotlinOptions {
        jvmTarget = "1.8"
        apiVersion = "1.1"
        languageVersion = "1.1"
    }
}

allOpen {
    annotation("org.openjdk.jmh.annotations.BenchmarkMode")
    annotation("org.openjdk.jmh.annotations.State")
}

jmh {
    iterations = 10 // Number of measurement iterations to do.
    //benchmarkMode = ["thrpt"] // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
    batchSize = 1
    // Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)
    fork = 1 // How many times to forks a single benchmark. Use 0 to disable forking altogether
    //operationsPerInvocation = 1 // Operations per invocation.
    timeOnIteration = "1s" // Time to spend at each measurement iteration.
    threads = 4 // Number of worker threads to run with.
    timeout = "10s" // Timeout for benchmark iteration.
    //timeUnit = "ns" // Output time unit. Available time units are: [m, s, ms, us, ns].
    warmup = "1s" // Time to spend at each warmup iteration.
    warmupBatchSize = 1 // Warmup batch size: number of benchmark method calls per operation.
    //warmupForks = 0 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
    warmupIterations = 10 // Number of warmup iterations to do.
    zip64 = false // Use ZIP64 format for bigger archives
    jmhVersion = "1.19" // Specifies JMH version
}

spotless {
    java {
        googleJavaFormat("1.3")
        trimTrailingWhitespace()
        endWithNewline()
        // licenseHeaderFile will fail with an empty line after license header,
        // disable it by default
        //licenseHeaderFile rootProject.file("config/spotless/apache-license-2.0.java")
    }
    kotlin {
        ktlint("0.8.3")
        trimTrailingWhitespace()
        endWithNewline()
        // licenseHeaderFile is unstable for Kotlin
        // (i.e. will remove `@file:JvmName` when formatting), disable it by default
        //licenseHeaderFile rootProject.file("config/spotless/apache-license-2.0.kt")
    }
}

afterEvaluate {
    jacoco {
        toolVersion = "0.7.9"
        applyTo junitPlatformTest
    }

    task jacocoJunitPlatformReport(type: JacocoReport) {
        executionData junitPlatformTest
        sourceSets sourceSets.main
        sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
        classDirectories = files(project.sourceSets.main.output)
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    check.dependsOn jacocoJunitPlatformReport
}

dokka {
    outputFormat = "html"
    outputDirectory = javadoc.destinationDir
    jdkVersion = 8
    kotlinTasks {
        [compileKotlin]
    }
    linkMapping {
        dir = project.rootDir.toPath().resolve("src/main/kotlin").toFile().path
        url = "https://github.com/uchuhimo/konf/blob/v${project.version}/src/main/kotlin"
        suffix = "#L"
    }
    externalDocumentationLink {
        url = new URL("http://fasterxml.github.io/jackson-databind/javadoc/2.8/")
    }
}

publish {
    userOrg = "uchuhimo"
    groupId = project.group
    artifactId = rootProject.name
    publishVersion = project.version
    licences = ["Apache-2.0"]
    desc = "A type safe configuration library for Kotlin," +
            " support to load from JSON, XML, YAML, HOCON, TOML, properties," +
            " map, command line and environment variables"
    website = "https://github.com/uchuhimo/konf"
    bintrayUser = bintrayUserProperty
    bintrayKey = bintrayKeyProperty
    dryRun = false
}

afterEvaluate {
    mavenJavadocJar.dependsOn dokka
    bintrayUpload.dependsOn(jar, mavenJavadocJar, mavenSourcesJar, check)
}

task install

tasks.whenTaskAdded { task ->
    if (task.name == "generatePomFileForMavenPublication") {
        bintrayUpload.dependsOn task
    } else if (task.name == "publishToMavenLocal") {
        install.dependsOn task
    }
}

buildScan {
    licenseAgreementUrl = "https://gradle.com/terms-of-service"
    licenseAgree = "yes"
}
